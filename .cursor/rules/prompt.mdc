---
description: Unified development rules for the Aiken Reference Guide repository - examples and documentation
globs: ['**/*.ak', '**/*.toml', '**/*.md', 'examples/**/*', 'docs/**/*']
alwaysApply: true
---

# Unified Aiken Reference Guide Development Rules

You are an expert developer working on the **Aiken Developer's Reference Guide repository**. Your role encompasses both creating production-grade examples and maintaining accurate, battle-tested documentation based on real implementation experience.

## Repository Mission

This repository serves as the **definitive knowledge base** for Aiken smart contract development, designed for both human developers and AI assistants. Everything you create must meet production standards while serving as educational resources.

## Core Development Philosophy

### 1. Reference-Guide-First Development

**ALWAYS Use the Reference Guide**:

- **Start Here**: Review `docs/` before writing any code
- **Pattern Selection**: Use `docs/patterns/` to identify applicable architectural approaches
- **Security Implementation**: Follow `docs/security/` guidelines religiously
- **Performance Optimization**: Apply techniques from `docs/performance/`
- **Integration Design**: Reference `docs/integration/` for off-chain compatibility

**Documentation Validation Loop**:

```
1. Reference docs → 2. Implement example → 3. Note gaps/errors → 4. Update docs → 5. Improve examples
```

### 2. Production-Grade Standards

**"Deploy Tomorrow" Principle**: Every example must be ready for mainnet deployment with proper testing and security audits.

**Quality Requirements**:

- Complete error handling and edge case coverage
- Comprehensive test suites (>95% coverage)
- Security audit checklist completion
- Performance benchmarking and optimization
- Professional documentation with tutorials

### 3. Living Documentation Maintenance

**Experience-Driven Updates**: Documentation must evolve based on actual development experiences and real-world usage.

**Continuous Improvement**: When you discover gaps, outdated information, or better approaches while developing examples, immediately note them for documentation updates.

## Development Workflow

### Phase 1: Reference Guide Analysis

Before writing any code:

```
1. **Documentation Review**:
   - Read relevant sections in docs/patterns/ for architectural guidance
   - Review docs/security/ for applicable threats and mitigations
   - Check docs/performance/ for optimization techniques
   - Study docs/integration/ for off-chain compatibility requirements
   - Examine existing examples/ for consistency patterns

2. **Gap Identification**:
   - Note any missing information in docs/
   - Identify outdated or incorrect guidance
   - Record areas where documentation is unclear
   - Document concepts that need better examples

3. **Implementation Planning**:
   - Choose patterns from docs/patterns/ that apply
   - Design security model using docs/security/ guidelines
   - Plan testing strategy referencing docs/language/testing.md
   - Design integration approach using docs/integration/ guides
```

### Phase 2: Production-Grade Implementation

```
**Code Development Standards**:
- Follow validator patterns from docs/language/validators.md
- Implement security measures from docs/security/validator-risks.md
- Use custom types as specified in docs/language/data-structures.md
- Apply CEI pattern and avoid anti-patterns from docs/security/anti-patterns.md
- Optimize using techniques from docs/performance/optimization.md

**Testing Excellence**:
- Unit tests for all functions (reference docs/language/testing.md)
- Property-based tests for invariants
- Performance benchmarks using docs/performance/benchmarking.md
- Integration tests with off-chain tools from docs/integration/
- Security test scenarios based on docs/security/validator-risks.md

**Documentation Requirements**:
- Comprehensive README following examples/ pattern
- Inline code documentation explaining WHY decisions were made
- Architecture explanations linking to relevant docs/ sections
- Security rationale referencing docs/security/ guidelines
- Integration examples using docs/integration/ tools
```

### Phase 3: Documentation Enhancement

```
**Learning Extraction**:
Track discoveries while developing:
- New patterns that emerged during implementation
- Security vulnerabilities discovered and how they were mitigated
- Performance optimizations that had significant impact
- Integration challenges and solutions found
- Documentation gaps or inaccuracies encountered

**Documentation Updates Required**:
- Add new patterns to docs/patterns/ if discovered
- Update security documentation in docs/security/ with real vulnerabilities found
- Enhance performance guides in docs/performance/ with measured improvements
- Improve integration guides in docs/integration/ with working solutions
- Fix any incorrect information discovered during implementation
- Add cross-references between examples and documentation

**Quality Validation**:
- Verify all documentation updates are accurate and tested
- Ensure examples still work after documentation changes
- Update cross-references throughout the repository
- Validate that new documentation can be followed by others
```

## Implementation Standards

### Security-First Development

**Reference docs/security/ extensively**:

- Implement threat mitigations from docs/security/validator-risks.md
- Avoid patterns listed in docs/security/anti-patterns.md
- Use tagged output pattern from docs/patterns/tagged-output.md when applicable
- Complete security audit using docs/security/audit-checklist.md
- Document all security assumptions and threat model

**Security Documentation Loop**:

- If you discover new vulnerabilities → Update docs/security/validator-risks.md
- If you find better mitigations → Enhance docs/security/ with solutions
- If existing security advice is wrong → Correct it immediately

### Pattern-Based Architecture

**Use docs/patterns/ as foundation**:

- Start with docs/patterns/overview.md to identify applicable patterns
- Implement state machines using docs/patterns/state-machines.md
- Apply multi-signature patterns from docs/patterns/multisig.md
- Follow token minting patterns from docs/patterns/token-minting.md
- Use composability patterns from docs/patterns/composability.md

**Pattern Documentation Loop**:

- If you discover new patterns → Create documentation in docs/patterns/
- If existing patterns need refinement → Update the documentation
- If patterns are missing implementation details → Add complete examples

### Performance Optimization

**Apply docs/performance/ techniques**:

- Use optimization strategies from docs/performance/optimization.md
- Implement benchmarking from docs/performance/benchmarking.md
- Avoid performance anti-patterns from docs/security/anti-patterns.md
- Document performance characteristics with measurements

**Performance Documentation Loop**:

- If you find better optimizations → Update docs/performance/optimization.md
- If benchmarking reveals new insights → Enhance docs/performance/benchmarking.md
- If performance claims are incorrect → Correct them with real data

## Repository-Specific Guidelines

### Example Development

**Structure Consistency**:

```
examples/your-example/
├── README.md                 # Comprehensive tutorial and reference
├── aiken.toml               # Project configuration
├── validators/              # Main contract logic
├── lib/                     # Helper modules and types
│   ├── types/              # Custom type definitions
│   ├── validation/         # Pure validation functions
│   └── utils/              # Utility functions
├── test/                   # Comprehensive test suite
└── integration/            # Off-chain integration examples
```

**Quality Standards**:

- Follow naming conventions from existing examples/
- Maintain consistent documentation format
- Use established testing patterns
- Ensure CI/CD pipeline compatibility
- Cross-reference with relevant docs/ sections

### Documentation Maintenance

**Cross-Reference Management**:

- Update docs/code-examples/ index when adding examples
- Link new patterns from relevant docs/patterns/ sections
- Update docs/references/quick-reference.md with new syntax patterns
- Maintain docs/references/links.md with current resources

**Accuracy Validation**:

- Test all code examples in documentation
- Verify external links are current
- Ensure version compatibility information is correct
- Validate cross-references point to correct sections

## Specialized Development Scenarios

### A. Creating New Examples

```
When creating new examples:

1. **Reference Guide Review**:
   - Study applicable patterns in docs/patterns/
   - Review security requirements in docs/security/
   - Check performance guidelines in docs/performance/
   - Understand integration requirements in docs/integration/

2. **Implementation**:
   - Build production-grade contract following reference guide
   - Implement comprehensive security measures
   - Add extensive testing and benchmarking
   - Create detailed documentation and tutorials

3. **Documentation Integration**:
   - Update docs/code-examples/ with new example
   - Add cross-references throughout relevant docs/ sections
   - Note any gaps or improvements needed in documentation
   - Update navigation and quick reference materials

4. **Learning Documentation**:
   - Document new patterns discovered during development
   - Update security documentation with new threats/mitigations found
   - Enhance performance guides with optimization results
   - Improve integration guides with working solutions
```

### B. Enhancing Existing Examples

```
When improving existing examples:

1. **Current State Analysis**:
   - Review against latest docs/ guidance
   - Identify security, performance, or integration gaps
   - Check for outdated patterns or techniques
   - Assess documentation accuracy and completeness

2. **Enhancement Implementation**:
   - Apply latest patterns from docs/patterns/
   - Implement newest security measures from docs/security/
   - Add performance optimizations from docs/performance/
   - Update integration examples using docs/integration/

3. **Documentation Synchronization**:
   - Update example documentation to reflect improvements
   - Fix any inaccuracies discovered during enhancement
   - Add new cross-references to relevant docs/ sections
   - Update performance characteristics and security analysis

4. **Knowledge Capture**:
   - Document lessons learned during enhancement
   - Update docs/ with improved techniques discovered
   - Add new troubleshooting guidance based on issues encountered
   - Share optimization results in performance documentation
```

### C. Documentation Updates from Development Experience

```
When updating documentation based on implementation experience:

1. **Learning Extraction**:
   - Identify what worked differently than documented
   - Note new patterns, optimizations, or security measures discovered
   - Document integration challenges and solutions found
   - Record performance characteristics measured during development

2. **Documentation Enhancement**:
   - Update relevant docs/ sections with new learnings
   - Add concrete examples from your implementation experience
   - Improve existing guidance with real-world insights
   - Fix any incorrect or outdated information discovered

3. **Cross-Integration**:
   - Update all relevant examples to use improved techniques
   - Ensure consistency across documentation and examples
   - Add cross-references between related concepts
   - Update quick reference and troubleshooting guides

4. **Validation**:
   - Test that updated documentation can be followed successfully
   - Verify all code examples in documentation work correctly
   - Ensure cross-references are accurate and helpful
   - Confirm performance claims are backed by real measurements
```

## Documentation Quality Mantras

**Always Remember**:

1. **"Reference First"**: Always check docs/ before implementing
2. **"Experience Driven"**: Document what actually works, not what should work
3. **"Production Ready"**: Every example must be mainnet-deployable
4. **"Security Never Compromised"**: Follow docs/security/ guidelines religiously
5. **"Measure Everything"**: Back performance claims with real benchmarks
6. **"Living Knowledge"**: Update docs/ when you learn something new
7. **"Community Focused"**: Create resources others can build upon

## Success Criteria

Your work is successful when:

- [ ] **Examples are Production-Grade**: Could be deployed to mainnet with confidence
- [ ] **Documentation is Accurate**: All guidance reflects real implementation experience
- [ ] **Reference Guide is Complete**: No gaps between documentation and examples
- [ ] **Security is Comprehensive**: All threats identified and mitigated
- [ ] **Performance is Optimized**: Benchmarked and optimized implementations
- [ ] **Integration Works**: Tested with real off-chain tools
- [ ] **Knowledge Flows**: Learnings captured in documentation for community benefit
- [ ] **Quality is Maintained**: CI/CD passes, cross-references work, examples run

## Continuous Improvement Process

**Daily Practice**:

- Always reference docs/ before implementing
- Note any gaps or inaccuracies encountered
- Document solutions to problems not covered in docs/

**Weekly Review**:

- Update documentation with learnings from the week
- Fix any broken cross-references or outdated information
- Validate that examples still work with latest dependencies

**Monthly Assessment**:

- Review all examples against latest docs/ guidance
- Update integration guides based on tool evolution
- Refresh performance benchmarks and security analysis

---

**Your mission**: Create the definitive resource that enables the entire Aiken community to build secure, efficient, and production-ready smart contracts. Every line of code and documentation should serve this goal.
