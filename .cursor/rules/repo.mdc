# 🚀 Aiken AI-Optimized Repository Rules

> **Repository governance rules for Aiken smart contract development with built-in AI SEO and LLM optimization**

## 🚀 **Deployment & Monitoring Commands**

### **Aiken Quality-Separated Branch Deployment**

```bash
# 1. Aiken-specific setup and validation
git clone <aiken-repository>
cd aiken-project
aiken check  # Validate all Aiken contracts
aiken test   # Run Aiken test suites

# 2. Deploy with real-time Aiken monitoring
git add .
git commit -m "feat: production-ready Aiken contracts with comprehensive security audit"
git push origin main

# 3. Monitor Aiken deployment status (run in separate terminal)
gh run list --limit 5 | grep -E "(Aiken|Examples)"
gh run watch  # Real-time Aiken workflow monitoring
gh workflow view ci-examples --yaml  # View Aiken matrix testing workflow
```

### **Advanced Aiken Monitoring & Validation**

```bash
# Monitor Aiken workflows across quality-separated branches
gh api repos/:owner/:repo/actions/runs --jq '.workflow_runs[] | select(.name | contains("Aiken") or contains("Examples")) | {name: .name, branch: .head_branch, status: .status, aiken_version: .head_commit.message}'

# Check Aiken deployment health per branch
gh workflow list | grep -E "(Aiken|Examples|Security)"
gh run list --workflow="CI – Examples" --branch main --limit 3
gh run list --workflow="Aiken Development Validation" --branch development --limit 3
gh run list --workflow="Aiken Educational Safety" --branch educational --limit 3

# Monitor Aiken-specific quality gates
gh api repos/:owner/:repo/commits/main/status --jq '.statuses[] | select(.context | contains("Aiken") or contains("hello-world") or contains("escrow")) | {context: .context, state: .state}'
```

### **Post-Deploy Aiken Verification**

```bash
# Verify Aiken-specific badges and links
curl -I "https://github.com/username/repo/workflows/CI%20%E2%80%93%20Examples/badge.svg"
curl -I "https://img.shields.io/badge/Aiken-v1.1.19-blue.svg"
curl -I "https://img.shields.io/badge/security-audited-green.svg"

# Check Aiken examples accessibility per branch
gh api repos/:owner/:repo/contents/examples/hello-world --ref main --jq '.name'
gh api repos/:owner/:repo/contents/examples/escrow-contract --ref main --jq '.name'
gh api repos/:owner/:repo/contents/examples --ref development --jq '.[].name'
gh api repos/:owner/:repo/contents/examples --ref educational --jq '.[].name'

# Monitor Aiken repository metrics
gh api repos/:owner/:repo --jq '{stars: .stargazers_count, forks: .forks_count, aiken_examples: .size}'
```

## 📋 Aiken Repository Checklist

Before deploying Aiken examples, ensure you've configured:

- [ ] **Aiken version compatibility**: v1.1.15+ specified and tested
- [ ] **Security status**: Comprehensive audit per Aiken contract
- [ ] **CI/CD workflows**: Matrix testing across Aiken versions (1.1.15, 1.1.19)
- [ ] **Branch protection**: Quality-separated rules for main/development/educational
- [ ] **Aiken dependencies**: All smart contract dependencies validated
- [ ] **GitHub CLI installed**: `gh auth status` ✅ (required for Aiken monitoring)

---

## 📁 Complete Aiken Repository Structure

```
aiken-project/
├── README.md                    # Aiken project overview + security status
├── NAVIGATION.md               # Aiken-specific navigation guide
├── QUICK_START.md              # 5-minute Aiken setup guide
├── CONTRIBUTING.md             # Aiken contribution guidelines
├── SECURITY_STATUS.md          # Aiken contract security audit by component
├── LICENSE                     # Open source license
├── .github/
│   ├── workflows/              # Aiken-specific CI/CD automation
│   │   ├── ci-core.yml
│   │   ├── ci-examples.yml     # Aiken matrix testing
│   │   ├── docs.yml
│   │   ├── aiken-security.yml  # Aiken security validation
│   │   └── _reusable-aiken-check.yml
│   ├── ISSUE_TEMPLATE/
│   │   ├── aiken_bug_report.md
│   │   ├── aiken_feature_request.md
│   │   └── aiken_security_issue.md
│   ├── PULL_REQUEST_TEMPLATE.md
│   └── CODEOWNERS              # Aiken-specific code ownership
├── docs/                       # Comprehensive Aiken documentation
│   ├── search-index.md         # Aiken AI/LLM search optimization
│   ├── overview/              # Aiken introduction and Cardano context
│   │   ├── introduction.md
│   │   ├── installation.md
│   │   └── cardano-ecosystem.md
│   ├── language/              # Aiken language reference
│   │   ├── syntax.md
│   │   ├── validators.md
│   │   ├── data-structures.md
│   │   └── testing.md
│   ├── patterns/              # Aiken-specific design patterns
│   │   ├── overview.md
│   │   ├── escrow-patterns.md
│   │   ├── token-patterns.md
│   │   └── advanced-patterns.md
│   ├── security/              # Aiken security-first development
│   │   ├── overview.md
│   │   ├── validator-risks.md
│   │   ├── best-practices.md
│   │   └── audit-checklist.md
│   ├── examples/              # Working Aiken contract documentation
│   │   ├── hello-world.md
│   │   ├── escrow-contract.md
│   │   └── nft-minting.md
│   ├── performance/           # Aiken optimization guides
│   │   ├── optimization.md
│   │   ├── benchmarking.md
│   │   └── profiling.md
│   ├── integration/           # Off-chain Aiken integration
│   │   ├── deployment.md
│   │   ├── offchain-tools.md
│   │   └── monitoring.md
│   └── references/            # Aiken quick reference materials
│       ├── quick-reference.md
│       ├── glossary.md
│       ├── troubleshooting.md
│       └── links.md
├── examples/                   # Working Aiken project examples
│   ├── hello-world/           # Basic Aiken validator (main branch)
│   │   ├── aiken.toml
│   │   ├── validators/hello_world.ak
│   │   ├── lib/hello_world/tests.ak
│   │   └── README.md
│   ├── escrow-contract/       # Production-ready Aiken escrow (main branch)
│   │   ├── aiken.toml
│   │   ├── validators/escrow.ak
│   │   ├── lib/escrow/
│   │   ├── offchain/
│   │   └── README.md
│   └── token-contracts/       # Aiken token patterns (branch-separated)
│       ├── nft-one-shot/      # Development branch
│       └── fungible-token/    # Educational branch with circuit breakers
├── scripts/                   # Aiken automation and utility scripts
│   ├── aiken-setup.sh
│   ├── ci/
│   │   └── local-check.sh     # Local Aiken validation
│   └── security/
│       └── audit-runner.sh    # Aiken security audit
└── tests/                     # Aiken test suites and validation
    ├── integration/           # Cross-tool Aiken integration tests
    ├── performance/           # Aiken performance benchmarks
    └── security/              # Aiken security test scenarios
```

---

## 📄 Aiken Repository Governance Rules

### 1. Branch Protection Configuration

#### Main Branch (Production Aiken Contracts)

```yaml
protection_rules:
  require_pull_request: true
  required_reviewers: 2
  dismiss_stale_reviews: true
  require_code_owner_reviews: true

  status_checks:
    require_all_pass: true
    require_up_to_date: true
    required_checks:
      - 'CI – Core'
      - 'CI – Examples / hello-world (Aiken 1.1.15)'
      - 'CI – Examples / hello-world (Aiken 1.1.19)'
      - 'CI – Examples / escrow-contract (Aiken 1.1.15)'
      - 'CI – Examples / escrow-contract (Aiken 1.1.19)'
      - 'Aiken Security Audit – Production'
      - 'Docs'

  additional_restrictions:
    require_signed_commits: true
    enforce_admins: true
    allow_force_pushes: false
    allow_deletions: false
    require_linear_history: true
```

#### Development Branch (Active Aiken Development)

```yaml
protection_rules:
  require_pull_request: true
  required_reviewers: 1
  require_code_owner_reviews: true

  status_checks:
    require_all_pass: true
    required_checks:
      - 'CI – Core'
      - 'Aiken Development Validation'
      - 'Aiken Security Scan – Development'
      - 'Docs'

  additional_restrictions:
    allow_force_pushes: true
    allow_deletions: true
```

#### Educational Branch (Aiken Learning Examples)

```yaml
protection_rules:
  require_pull_request: true
  required_reviewers: 1
  require_code_owner_reviews: true

  status_checks:
    require_all_pass: true
    required_checks:
      - 'Aiken Educational Content Validation'
      - 'Circuit Breaker Verification'
      - 'Docs Educational Standards'
```

### 2. CODEOWNERS Configuration

```gitignore
# Aiken-Specific Code Ownership Rules

# === GLOBAL OWNERSHIP ===
* @aiken-maintainer

# === AIKEN CONTRACT SECURITY ===
**/validators/ @aiken-maintainer @aiken-security-team
**/lib/ @aiken-maintainer @aiken-reviewers
examples/*/validators/*.ak @aiken-maintainer @aiken-security-team

# === BRANCH-SPECIFIC OWNERSHIP ===
# Main branch - Production Aiken contracts only
examples/hello-world/ @aiken-maintainer @aiken-security-team
examples/escrow-contract/ @aiken-maintainer @aiken-security-team

# Development branch - Active Aiken development
examples/token-contracts/nft-one-shot/ @aiken-maintainer @aiken-contributors

# Educational branch - Learning Aiken examples
examples/token-contracts/fungible-token/ @aiken-maintainer @aiken-education-team

# === AIKEN DOCUMENTATION ===
docs/language/ @aiken-maintainer @aiken-documentation-team
docs/security/ @aiken-maintainer @aiken-security-team
docs/patterns/ @aiken-maintainer @aiken-patterns-team

# === AIKEN CI/CD ===
.github/workflows/*aiken* @aiken-maintainer @aiken-devops-team
scripts/ci/local-check.sh @aiken-maintainer @aiken-devops-team

# === AIKEN AI OPTIMIZATION ===
docs/search-index.md @aiken-maintainer @aiken-ai-team
.cursor/ @aiken-maintainer @aiken-ai-team
```

### 3. Issue Templates

#### Aiken Bug Report Template

```markdown
---
name: Aiken Bug Report
about: Report a bug in Aiken smart contracts or documentation
title: '[AIKEN BUG] '
labels: ['bug', 'aiken', 'needs-triage']
---

## Aiken Environment

- **Aiken Version**: (e.g., v1.1.19)
- **Example/Contract**: (e.g., hello-world, escrow-contract)
- **Branch**: (main, development, educational)

## Bug Description

Clear description of the Aiken-related issue.

## Expected Aiken Behavior

What should happen with the Aiken contract.

## Actual Aiken Behavior

What actually happens with the Aiken contract.

## Reproduction Steps

1. Navigate to Aiken example: `cd examples/...`
2. Run Aiken command: `aiken check`
3. Observe issue...

## Additional Context

- [ ] Issue affects contract compilation
- [ ] Issue affects contract testing
- [ ] Issue affects security validation
- [ ] Issue affects documentation
```

#### Aiken Security Issue Template

````markdown
---
name: Aiken Security Issue
about: Report a security vulnerability in Aiken contracts
title: '[AIKEN SECURITY] '
labels: ['security', 'aiken', 'critical']
---

## ⚠️ Security Issue Classification

**Severity**: [ ] Critical [ ] High [ ] Medium [ ] Low
**Affected Contract**: (specific Aiken validator)
**Branch**: (main/development/educational)

## Vulnerability Description

Detailed description of the security issue in the Aiken contract.

## Impact Assessment

Potential consequences if this vulnerability is exploited.

## Affected Aiken Code

```aiken
// Include specific Aiken code that demonstrates the vulnerability
```
````

## Suggested Fix

Proposed solution or mitigation for the Aiken security issue.

## Additional Security Context

- [ ] Affects production contracts (main branch)
- [ ] Affects development contracts
- [ ] Affects educational examples
- [ ] Could lead to fund loss
- [ ] Could lead to contract exploitation

````

### 4. Automated Quality Gates

```yaml
# .github/workflows/aiken-promotion-gate.yml
name: "Aiken Production Promotion Gate"

on:
  pull_request:
    branches: [main]
    paths: ['examples/**']

jobs:
  aiken-security-audit:
    name: "Comprehensive Aiken Security Audit"
    runs-on: ubuntu-latest
    steps:
      - name: Install Aiken
        run: cargo install aiken --version 1.1.19 --locked

      - name: Aiken Security Checklist
        run: |
          python scripts/security/aiken-comprehensive-audit.py
          python scripts/security/aiken-vulnerability-scan.py --strict

      - name: Aiken Circuit Breaker Check
        run: |
          python scripts/security/aiken-circuit-breaker-check.py

  aiken-performance-benchmarks:
    name: "Aiken Performance Validation"
    runs-on: ubuntu-latest
    steps:
      - name: Aiken Performance Suite
        run: |
          python scripts/performance/aiken-benchmark-suite.py --production
          python scripts/performance/aiken-gas-optimization.py

  aiken-matrix-testing:
    name: "Aiken Version Compatibility"
    strategy:
      matrix:
        aiken_version: ['1.1.15', '1.1.19']
    runs-on: ubuntu-latest
    steps:
      - name: Test Aiken ${{ matrix.aiken_version }}
        run: |
          cargo install aiken --version ${{ matrix.aiken_version }} --locked
          cd examples && for dir in */; do (cd "$dir" && aiken check && aiken test); done

  aiken-documentation-quality:
    name: "Aiken Documentation Standards"
    runs-on: ubuntu-latest
    steps:
      - name: Aiken Documentation Validation
        run: |
          python scripts/docs/aiken-completeness-check.py --production
          python scripts/docs/aiken-ai-optimization-validator.py
````

## 🎯 **Aiken Repository Implementation Checklist**

### **Phase 1: Aiken Core Structure + Monitoring**

- [ ] **Install Aiken**: `aiken --version` ✅ (v1.1.15+ required)
- [ ] **Install GitHub CLI**: `gh --version` ✅ (required for monitoring)
- [ ] **Authenticate GitHub**: `gh auth login`
- [ ] Configure Aiken project structure with quality-separated branches
- [ ] Set up SECURITY_STATUS.md with Aiken contract audit status
- [ ] Configure CODEOWNERS for Aiken-specific ownership
- [ ] **Test Aiken access**: `aiken check` works in examples

### **Phase 2: Aiken Documentation Excellence**

- [ ] Complete docs/language/ with Aiken syntax and validators
- [ ] Document Aiken patterns in docs/patterns/
- [ ] Create Aiken security documentation in docs/security/
- [ ] Write Aiken examples documentation in docs/examples/
- [ ] Set up Aiken AI optimization in docs/search-index.md

### **Phase 3: Aiken Examples by Quality**

- [ ] **Main branch examples** (Production-ready):
  - [ ] hello-world Aiken validator with security audit
  - [ ] escrow-contract with comprehensive testing
- [ ] **Development branch examples** (Active development):
  - [ ] nft-one-shot with functional validation
- [ ] **Educational branch examples** (Safe learning):
  - [ ] fungible-token with circuit breakers

### **Phase 4: Aiken AI Optimization**

- [ ] Add Aiken-specific YAML frontmatter to all documentation
- [ ] Cross-reference all Aiken concepts and patterns
- [ ] Test documentation with AI assistants for Aiken accuracy
- [ ] Validate Aiken context loading priorities

### **Phase 5: Aiken Production + Live Monitoring**

- [ ] Deploy Aiken CI/CD workflows with matrix testing
- [ ] Configure Aiken security scanning automation
- [ ] Set up Aiken performance benchmarking
- [ ] **Deploy with monitoring**: Use Aiken commands from above
- [ ] **Verify Aiken status**: `gh run list --workflow="CI – Examples"`
- [ ] **Monitor ongoing**: `gh run watch` for Aiken deployments

## 🏆 **Expected Aiken Repository Outcomes**

Repositories following these Aiken rules should achieve:

- **🔍 Enhanced Aiken Discoverability**: AI systems easily find and cite Aiken examples
- **⚡ Faster Aiken Onboarding**: Developers productive with Aiken in under 5 minutes
- **🔒 Aiken Security Excellence**: Security considerations integrated throughout all examples
- **📚 Self-Documenting Aiken**: Documentation stays current with working Aiken examples
- **🤝 Aiken Community Ready**: Clear contribution paths for Aiken development

These rules establish the **gold standard** for Aiken smart contract repositories in the AI era, ensuring maximum discoverability, usability, and professional credibility for Cardano blockchain development.

---

_Aiken Repository Rules v1.0 - Optimized for AI SEO and Aiken developer experience_
